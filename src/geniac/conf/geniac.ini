# TODO: use configobj module instead
# TODO: some of those parameters should be changed through the CLI

###############################################################################
#           Project section describe metadata related to cli tools            #
###############################################################################

# TODO: should also accept directories for DSL2
# Paths to workflow scripts
[project.workflow]
main         = ${tree.base:path}/**/*.nf

# Mandatory [tree.*] sections required for geniac
[geniac.directories]
conf         = conf
geniac       = geniac
dependencies = recipes.dependencies
conda        = recipes.conda
singularity  = recipes.singularity
docker       = recipes.docker
env          = env
modules      = modules.fromSource

# Nextflow configuration default files analyzed by the linter
# NB: other config files found in geniac.directories.conf will also be checked
[geniac.check.config]
nextflow     = ${tree.base:path}/nextflow.config
base         = ${tree.conf:path}/base.config
process      = ${tree.conf:path}/process.config
geniac       = ${tree.conf:path}/geniac.config
genomes      = ${tree.conf:path}/genomes.config
test         = ${tree.conf:path}/test.config

# Files generated by geniac. They are normally included in Nextflow profiles
[geniac.generated.config]
conda        = ${tree.conf:path}/conda.config
multiconda   = ${tree.conf:path}/multiconda.config
singularity  = ${tree.conf:path}/singularity.config
docker       = ${tree.conf:path}/docker.config
path         = ${tree.conf:path}/path.config
multipath    = ${tree.conf:path}/multipath.config
cluster      = ${tree.conf:path}/cluster.config

# Geniac lint flags
[geniac.flags]
# Toggle ON/OFF check of conda packages with conda CLI
condaCheck   =   false

###############################################################################
#    Tree section describe the content of a template compatible with geniac   #
###############################################################################

# Root folder
[tree.base]
# Is the folder required ?
required    = true
# Is the folder recommended ?
recommended = true
# Should we analyze files and sub directories recursively  or only the root ?
recursive   = false
# Path to the folder
path        = .
# Path(s) to mandatory file(s)
mandatory   =
    ${geniac.check.config:nextflow}
# Path(s) to optional file(s)
optional
# Path(s) to file(s) excluded from the analysis
excluded
# Path(s) to file(s) not allowed in the path
prohibited

[tree.geniac]
required    = true
recommended = true
recursive   = false
path        = ${tree.base:path}/geniac
mandatory
optional
excluded     =
    ${tree.geniac:path}/**/*.nf
prohibited

# base/conf
[tree.conf]
required    = true
recommended = true
recursive   = false
path        = ${tree.base:path}/conf
mandatory   =
    ${geniac.check.config:base}
    ${geniac.check.config:geniac}
    ${geniac.check.config:process}
optional   =
    ${geniac.check.config:test}
    ${geniac.check.config:genomes}
    ${tree.conf:path}/**/*.config
excluded    =
    ${geniac.generated.config:conda}
    ${geniac.generated.config:multiconda}
    ${geniac.generated.config:singularity}
    ${geniac.generated.config:docker}
    ${geniac.generated.config:path}
    ${geniac.generated.config:multipath}
    ${geniac.generated.config:cluster}
prohibited

# base/recipes
[tree.recipes]
required    = false
recommended = false
recursive   = false
path        = ${tree.base:path}/recipes
mandatory
optional
excluded
prohibited

# base/recipes/conda
[tree.recipes.conda]
required    = false
recommended = false
recursive   = false
path        = ${tree.recipes:path}/conda
mandatory   =
    ${tree.recipes.conda:path}/*.yml
    ${tree.recipes.conda:path}/*.yaml
optional
excluded     =
    ${tree.recipes.conda:path}/*.md
    ${tree.recipes.conda:path}/*.rst
    ${tree.recipes.conda:path}/*.txt
prohibited

# base/recipes/singularity
[tree.recipes.singularity]
required    = false
recommended = false
recursive   = false
path        = ${tree.recipes:path}/singularity
mandatory   =
    ${tree.recipes.singularity:path}/*.def
optional
excluded     =
    ${tree.recipes.singularity:path}/*.md
    ${tree.recipes.singularity:path}/*.rst
    ${tree.recipes.singularity:path}/*.txt
prohibited

# base/recipes/docker
[tree.recipes.docker]
required    = false
recommended = false
recursive   = false
path        = ${tree.recipes:path}/docker
mandatory   =
    ${tree.recipes.docker:path}/*.DockerFiles
optional
excluded     =
    ${tree.recipes.docker:path}/*.md
    ${tree.recipes.docker:path}/*.rst
    ${tree.recipes.docker:path}/*.txt
prohibited

# base/recipes/dependencies
[tree.recipes.dependencies]
required    = false
recommended = false
recursive   = true
path        = ${tree.recipes:path}/dependencies
mandatory
optional
excluded     =
    ${tree.recipes.dependencies:path}/*.md
    ${tree.recipes.dependencies:path}/*.rst
    ${tree.recipes.dependencies:path}/*.txt
prohibited

# base/modules
[tree.modules]
required    = false
recommended = true
recursive   = false
path        = ${tree.base:path}/modules
mandatory
optional
excluded
prohibited    =
    ${tree.modules:path}/CMakeLists.txt

# base/modules
[tree.modules.fromSource]
required    = false
recommended = true
recursive   = true
path        = ${tree.modules:path}/fromSource
mandatory   =
    ${tree.modules.fromSource:path}/CMakeLists.txt
    ${tree.modules.fromSource:path}/*/CMakeLists.txt
optional
excluded
prohibited

# base/env
[tree.env]
required    = false
recommended = true
recursive   = false
path        = ${tree.base:path}/env
mandatory
optional
excluded
prohibited

# base/test
[tree.test]
required    = false
recommended = true
recursive   = false
path        = ${tree.base:path}/test
mandatory
optional
excluded
prohibited

# base/test/data
[tree.test.data]
required    = false
recommended = true
recursive   = false
path        = ${tree.test:path}/data
mandatory
optional
excluded
prohibited

###############################################################################
#  Scope section describe which Nextflow config scopes is related to geniac   #
###############################################################################
# Each section is defined with the following attributes
# [scope.sectionName]                   -> Define a new Nextflow config scope
# required (bool)                       -> Is this scope mandatory for geniac ?
# paths (list)                          -> list of Nextflow parameters in this scope which should be
#                                       interpreted as paths
# properties (list)                     -> list of mandatory Nextflow parameters in this scope
# patterns (list)                       -> list of regex related to the expected format of the
#                                       parameters in this scope
# scopes (list)                         -> list of nested scopes

# env
[scope.env]
required    = false
paths
properties
patterns
scopes

# params
[scope.params]
required    = true
paths       =
    genomeAnnotationPath
properties
patterns
scopes      =
    geniac

[scope.params.values.default]
genomeAnnotationPath    =
    $${projectDir}/../annotations
    ""
    ''

# params.geniac
[scope.params.geniac]
required    = true
paths       =
    singularityImagePath
    multiPath
    path
properties
patterns
scopes      =
    tools
    containers

[scope.params.geniac.values.default]
singularityImagePath    = $${projectDir}/../containers/singularity
multiPath               = $${projectDir}/../multipath
path                    = $${projectDir}/../path/bin

# params.geniac.tools
[scope.params.geniac.tools]
required    = false
paths
properties
patterns
scopes

# params.geniac.containers
[scope.params.geniac.containers]
required    = false
paths
properties  =
    singularityRunOptions
    dockerRunOptions
patterns
scopes      =
    yum
    git
    cmd

[scope.params.geniac.containers.values.default]
singularityRunOptions   = ""
dockerRunOptions        = "-v \"\$$PWD\":/tmp"

[scope.params.geniac.containers.values.prohibited]
singularityRunOptions   = (?P<opt>(?<=-B )|(?<=--bind ))\s*(?P<values>[\w_/,:]*(?P<prohibited>((?P<precomma>,)|(?<= ))(?P<host>[\w/_]+:|)(?P<prohibited_pattern>/tmp)(?P<mnt>:[\w/_]+|)((?(precomma)|,)|\s|$$))[\w_/,:]*)

# params.geniac.containers.yum
[scope.params.geniac.containers.yum]
required    = false
paths
properties
patterns
scopes

# params.geniac.containers.git
[scope.params.geniac.containers.git]
required    = false
paths
properties
patterns
scopes

# params.geniac.containers.cmd
[scope.params.geniac.containers.cmd]
required    = false
paths
properties
patterns
scopes      =
    post
    envCustom

# params.geniac.containers.cmd.post
[scope.params.geniac.containers.cmd.post]
required    = false
paths
properties
patterns     = (?P<list>\[(?P<listElt>(?P<command>(?P<quote>(?P<simpleQuote>')|(?P<doubleQuote>\"))(?(simpleQuote)[\"\\!\w\s]*|)(?(doubleQuote)['\\!\w\s]*|)(?P=quote))(?P<closeElt>(\s*,\s*|\])))+(?<=\]))|(?P<emptyList>\[\s*\])
scopes

# params.geniac.containers.cmd.envCustom
[scope.params.geniac.containers.cmd.envCustom]
required    = false
paths
properties
patterns    = (?P<list>\[(?P<listElt>(?P<command>(?P<quote>(?P<simpleQuote>')|(?P<doubleQuote>\"))(?(simpleQuote)[A-Z0-9_]+=[\"\\!\w\s]*|)(?(doubleQuote)[A-Z0-9_]+=['\\!\w\s]*|)(?P=quote))(?P<closeElt>(\s*,\s*|\])))+(?<=\]))|(?P<emptyList>\[\s*\])
scopes

# process
[scope.process]
required    = false
paths
properties  =
    accelerator
    afterScript
    beforeScript
    cache
    cpus
    conda
    container
    containerOptions
    clusterOptions
    disk
    echo
    errorStrategy
    executor
    ext
    label
    machineType
    maxErrors
    maxForks
    maxRetries
    memory
    module
    penv
    pod
    publishDir
    queue
    scratch
    stageInMode
    stageOutMode
    storeDir
    tag
    time
    validExitStatus
patterns
scopes

# executor
[scope.executor]
required    = false
paths
properties  =
    name
    queueSize
    pollInterval
    dumpInterval
    queueStatInterval
    exitReadTimeout
    killBatchSize
    submitRateLimit
    perJobMemLimit
    jobName
    cpus
    memory
patterns
scopes

# docker
[scope.docker]
required    = false
paths
properties  =
    enabled
    envWhitelist
    legacy
    sudo
    tty
    temp
    remove
    runOptions
    registry
    fixOwnership
    engineOptions
    mountFlags
patterns
scopes

# singularity
[scope.singularity]
required    = false
paths
properties  =
    enabled
    engineOptions
    envWhitelist
    runOptions
    noHttps
    autoMounts
    cacheDir
    pullTimeout
patterns
scopes

# podman
[scope.podman]
required    = false
paths
properties  =
    enabled
    envWhitelist
    temp
    remove
    runOptions
    registry
    engineOptions
    mountFlags
patterns
scopes

# manifest
[scope.manifest]
required    = false
paths
properties  =
    author
    defaultBranch
    recurseSubmodules
    description
    doi
    homePage
    mainScript
    name
    nextflowVersion
    version
patterns
scopes

# trace
[scope.trace]
required    = false
paths
properties  =
    enabled
    fields
    file
    sep
    raw
patterns
scopes

# aws
[scope.aws]
required    = false
paths
properties  =
    accessKey
    secretKey
    region
patterns
scopes      =
    client
    batch

# aws.client
[scope.aws.client]
required    = false
paths
properties  =
    connectionTimeout
    endpoint
    maxConnections
    maxErrorRetry
    protocol
    proxyHost
    proxyPort
    proxyUsername
    proxyPassword
    signerOverride
    socketSendBufferSizeHint
    socketRecvBufferSizeHint
    socketTimeout
    storageEncryption
    userAgent
    uploadMaxThreads
    uploadChunkSize
    uploadStorageClass
    uploadMaxAttempts
    uploadRetrySleep
patterns
scopes

# aws.batch
[scope.aws.batch]
required    = false
paths
properties  =
    cliPath
    jobRole
    volumes
    delayBetweenAttempts
    maxParallelTransfers
    maxTransferAttempts
patterns
scopes

# conda
[scope.conda]
required    = false
paths
properties  =
    cacheDir
    createTimeout
patterns
scopes

# k8s
[scope.k8s]
required    = false
paths
properties  =
    autoMountHostPaths
    context
    namespace
    serviceAccount
    launchDir
    workDir
    projectDir
    pod
    pullPolicy
    runAsUser
    storageClaimName
    storageMountPath
    storageSubPath
    volumeClaims
patterns
scopes

# timeline
[scope.timeline]
required    = false
paths
properties  =
    enabled
    file
patterns
scopes

# mail
[scope.mail]
required    = false
paths
properties  =
    from
    debug
    smtp.host
    smtp.port
    smtp.user
    smtp.password
    smtp.connectiontimeout
    smtp.timeout
    smtp.writetimeout
    smtp.from
    smtp.localhost
    smtp.localaddress
    smtp.localport
    smtp.ehlo
    smtp.auth
    smtp.auth.mechanisms
    smtp.auth.login.disable
    smtp.auth.plain.disable
    smtp.auth.digest-md5.disable
    smtp.auth.ntlm.disable
    smtp.auth.ntlm.domain
    smtp.auth.ntlm.flags
    smtp.auth.xoauth2.disable
    smtp.submitter
    smtp.dsn.notify
    smtp.dsn.ret
    smtp.allow8bitmime
    smtp.sendpartial
    smtp.sasl.enable
    smtp.sasl.mechanisms
    smtp.sasl.authorizationid
    smtp.sasl.realm
    smtp.sasl.usecanonicalhostname
    smtp.quitwait
    smtp.reportsuccess
    smtp.socketFactory
    smtp.socketFactory.class
    smtp.socketFactory.fallback
    smtp.socketFactory.port
    smtp.ssl.enable
    smtp.ssl.checkserveridentity
    smtp.ssl.trust
    smtp.ssl.socketFactory
    smtp.ssl.socketFactory.class
    smtp.ssl.socketFactory.port
    smtp.ssl.protocols
    smtp.ssl.ciphersuites
    smtp.starttls.enable
    smtp.starttls.required
    smtp.proxy.host
    smtp.proxy.port
    smtp.proxy.user
    smtp.proxy.password
    smtp.socks.host
    smtp.socks.port
    smtp.mailextension
    smtp.userset
    smtp.noop.strict
patterns
scopes

# notification
[scope.notification]
required    = false
paths
properties  =
    enabled
    to
    from
    template
    binding
patterns
scopes

# report
[scope.report]
required    = false
paths
properties  =
    enabled
    file
patterns
scopes

# weblog
[scope.weblog]
required    = false
paths
properties  =
    enabled
    url
patterns
scopes
