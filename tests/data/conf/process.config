/*
 * -------------------------------------------------
 *  Nextflow process config file
 * -------------------------------------------------
 * Define here the different level of RAM/CPUs use
 * for the different processes as well as the track
 * reports
 */

params {
  // Limit max resources
  maxCpus = 2
  maxMemory = 16.GB
  maxTime = 48.h
}

process {
  // Defaults for processes without labels
  cpus = { checkMax( 2, 'cpus' ) }
  memory = { checkMax( 4.GB * task.attempt, 'memory' ) }
  time = { checkMax( 2.h * task.attempt, 'time' ) }

  //errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  errorStrategy = 'retry'
  maxRetries = 1
  maxErrors = '-1'

  // add withName directive for process-specific tuning, for example:
  // withName:outputDocumentation {
  //   memory = { checkMax( 100.MB, 'memory' ) }
  // }
  // withName:workflowSummaryMqc {
  //   cpus = { checkMax (1, 'cpus') }
  //   memory = { checkMax( 10.MB, 'memory' ) }
  //   executor = 'local'
  // }

  // Process-specific resource requirements
  // Customise requirements for specific processes
  withLabel: minCpu {
    cpus = { checkMax( 1 * task.attempt, 'cpus' ) }
  }
  withLabel: lowCpu {
    cpus = { checkMax( 2 * task.attempt, 'cpus' )}
  }
  withLabel: medCpu {
    cpus = { checkMax( 4 * task.attempt, 'cpus' ) }
  }
  withLabel: highCpu {
    cpus = { checkMax( 8 * task.attempt, 'cpus' ) }
  }
  withLabel: extraCpu {
    cpus = { checkMax( 16 * task.attempt, 'cpus' ) }
  }


  withLabel: minMem {
    memory = { checkMax( 1.GB * task.attempt, 'memory' ) }
  }
  withLabel: lowMem {
    memory = { checkMax( 2.GB * task.attempt, 'memory' ) }
  }
  withLabel: medMem {
    memory = { checkMax( 8.GB * task.attempt, 'memory' ) }
  }
  withLabel: highMem {
    memory = { checkMax( 16.GB * task.attempt, 'memory' ) }
  }
  withLabel: extraMem {
    memory = { checkMax( 32.GB * task.attempt, 'memory' ) }
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// From nf-core
timeline {
  enabled = true
  file = "${params.summaryDir}/trace/timeline.html"
}
report {
  enabled = true
  file = "${params.summaryDir}/trace/report.html"
}
trace {
  enabled = true
  raw = true
  fields = 'process,task_id,hash,native_id,module,container,tag,name,status,exit,submit,start,complete,duration,realtime,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes,attempt,workdir,scratch,queue,cpus,memory,disk,time,env'
  file = "${params.summaryDir}/trace/trace.txt"
}
dag {
  enabled = true
  file = "${params.summaryDir}/trace/DAG.pdf"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def checkMax(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.maxMemory as nextflow.util.MemoryUnit) == 1)
        return params.maxMemory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.maxMemory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.maxTime as nextflow.util.Duration) == 1)
        return params.maxTime as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.maxTime}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.maxCpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.maxCpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
