import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

START_PATTERN = "__sta__";
STOP_PATTERN = "__sto__";
p1 = Pattern.compile("\"(.*?)\"");
p2 = Pattern
        .compile("(" + START_PATTERN + "((?!" + STOP_PATTERN + ").)*?) +(.*?" + STOP_PATTERN + ")");
SPECIAL_PATHS = Arrays.asList(new String[] { "\$PWD" });


String sanitizePath(String path) throws Exception {
    if (path.endsWith("/")) {
        path = path.substring(0, path.length() - 1);
    }

    if (!path.startsWith("/") && !SPECIAL_PATHS.contains(path)) {
        throw new Exception(
                "ERROR reported from conf/singularity.config. '" + path + "' is an invalid binding, it must be an absolute path. You should modify what was passed to the '-Dap_mount_dir' option during the cmake configuration step with geniac (see https://geniac.readthedocs.io and the FAQ).");
    }

    return path;
}

void checkPath(String source, String target, Map pathMap) {
    if ("$HOME".contains(source)) {
        throw new Exception("ERROR reported from conf/singularity.config. '" + source
                + "' is an invalid binding source. Indeed, as a result of this binding the user HOME directory would be available inside the container which can drive to unpredictible reproducibility issues. You should modify what was passed to the '-Dap_mount_dir' option during the cmake configuration step with geniac (see https://geniac.readthedocs.io and the FAQ).");
    }

    if (!target.startsWith("/")) {
        throw new Exception("ERROR reported from conf/singularity.config. '" + target + "' is an invalid binding target, it must be an absolute path. You should modify what was passed to the '-Dap_mount_dir' option during the cmake configuration step with geniac (see https://geniac.readthedocs.io and the FAQ).");
    }

    if (pathMap.containsKey(target) && !source.equals(pathMap.get(target))) {
        throw new Exception("Several bindings for to the same target " + target);
    }
}

void checkBindings() throws Exception {
    singularity.runOptions += " -B $projectDir,$launchDir,\$PWD:/tmp,\$PWD:/var/tmp,${params.genomeAnnotationPath?:''},";
    String input = singularity.runOptions;

    Matcher m = p1.matcher(input);
    if (m.find()) {
        input = m.replaceAll(START_PATTERN + "\$1" + STOP_PATTERN);
    }

    m = p2.matcher(input);
    while (m.find()) {
        input = m.replaceAll("\$1##\$3");
        m = p2.matcher(input);
    }

    String[] tab = input.split(" ");
    Map<String, String> pathMap = new HashMap<>();
    boolean curr = false;
    for (String inputElem : tab) {
        if (inputElem.equals("-B") || inputElem.equals("--bind")) {
            curr = true;
        } else if (!inputElem.startsWith("-") && curr) {
            for (String path : inputElem.split(",")) {
                if (path.isEmpty()) {
                    continue;
                }

                path = path.replaceAll("##", " ");
                path = path.replaceAll(START_PATTERN, """);
                path = path.replaceAll(STOP_PATTERN, """);
                String[] pathTab = path.split(":");

                String target = null;
                String source = sanitizePath(pathTab[0]);

                if (pathTab.length > 1) {
                    target = sanitizePath(pathTab[1]);
                } else {
                    target = source;
                }

                checkPath(source, target, pathMap);
                pathMap.put(target, source);

                // is symlink
                File f = new File(source);
                Path p = f.toPath();
                if(Files.isSymbolicLink(p)) {
                    String symlinkPath = p.toRealPath();
                    checkPath(symlinkPath, symlinkPath, pathMap);
                    pathMap.put(symlinkPath, symlinkPath);
                    singularity.runOptions += " -B $symlinkPath";
                }
            }
        } else {
            curr = false;
        }
    }

    for (Entry<String, String> entry : pathMap.entrySet()) {
        System.out.println("path " + entry.getValue() + " mounted in " + entry.getKey() + ".");
    }
}


def checkProfileSingularity(path){
  if (new File(path).exists()){
    File directory = new File(path)
    def contents = []
    directory.eachFileRecurse (groovy.io.FileType.FILES){ file -> contents << file }
    if (!path?.trim() || contents == null || contents.size() == 0){
      println "   ### ERROR ###    The option '-profile singularity' requires the singularity images to be installed on your system. See `--singularityImagePath` for advanced usage."
      System.exit(-1)
    }
  }else{
    println "   ### ERROR ###    The option '-profile singularity' requires the singularity images to be installed on your system. See `--singularityImagePath` for advanced usage."
    System.exit(-1)
  }
}

singularity {
  enabled = true
  autoMounts = false
  runOptions = "--containall ${(params.geniac.containers?.singularityRunOptions ?: '').replace('-C', '').replace('--containall', '')}"
}

process {
  checkProfileSingularity("${params.geniac.singularityImagePath}")
  checkBindings()
  withLabel:alpine{ container = "${params.geniac.singularityImagePath}/alpine.sif" }
  withLabel:fastqc{ container = "${params.geniac.singularityImagePath}/fastqc.sif" }
  withLabel:helloWorld{ container = "${params.geniac.singularityImagePath}/helloworld.sif" }
  withLabel:multiqc{ container = "${params.geniac.singularityImagePath}/multiqc.sif" }
  withLabel:onlyLinux{ container = "${params.geniac.singularityImagePath}/onlylinux.sif" }
  withLabel:python{ container = "${params.geniac.singularityImagePath}/python.sif" }
  withLabel:trickySoftware{ container = "${params.geniac.singularityImagePath}/trickysoftware.sif" }
}
