/*
 * -------------------------------------------------
 *  nfcore/rnaseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

manifest {
  name = '@ap_pipeline_name@'
  description = '@ap_pipeline_description@'
  homePage = '@ap_pipeline_homepage@'
  author = 'Institut Curie - Bioinformatics core facility'
  version = '@ap_pipeline_version@'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
}

/*
 * Global default params, used in configs
 */

params {
  //container = '' 
  help = false
  queue = false
  name = false
  //aligner = 'star'
  counts = 'star'
  stranded = 'auto'

  genome = false
 
  singleEnd = false
  reads = null

  outdir = './results'
  email = false
  plaintext_email = false
 
  multiqc_config = "$baseDir/assets/multiqc_config.yaml"
  metadata = "$baseDir/assets/metadata.tsv"

  maxMultiqcEmailFileSize = 25.MB
  readPaths = null
  tracedir = "${params.outdir}/pipeline_info"
  
  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

  // conda
  condaPrefix = "$HOME/conda-cache-nextflow"
}

/*
 * Environmment variables 
 */

env {
    MY_GOBAL_VAR = "somevalue"
}

/*
 * Configs and profiles
 */


// Additional configs
includeConfig 'conf/base.config'
includeConfig 'conf/genomes.config'
includeConfig 'conf/tools.config'


// Profiles
profiles {
  conda { 
    includeConfig 'conf/conda.config'
  }
  multiconda {
    includeConfig 'conf/multiconda.config'
  }
  docker { 
    docker.enabled = true 
    includeConfig 'conf/containers.config'
  }
  singularity { 
    singularity.enabled = true
    singularity.autoMounts = true
    includeConfig 'conf/singularity.config'
  }
  path {
    includeConfig 'conf/path.config'
  }
  cluster {
    includeConfig 'conf/cluster.config'
  }
  standard {
    includeConfig 'conf/standard.config'
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// From nf-core
timeline {
  enabled = true
  file = "${params.tracedir}/trace/timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/trace/report.html"
}
trace {
  enabled = true
  raw = true
  fields = 'process,task_id,hash,native_id,module,container,tag,name,status,exit,submit,start,complete,duration,realtime,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes,attempt,workdir,scratch,queue,cpus,memory,disk,time,env'
  file = "${params.tracedir}/trace/trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/trace/DAG.pdf"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
